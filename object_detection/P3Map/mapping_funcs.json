{
    "op_to_func": {
        "BatchCollator": [
            "munmap|libc.so.6",
            "gomp_team_end|libgomp.so.1",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}&&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}&&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "[OpenMP worker]|libgomp.so.1",
            "gomp_simple_barrier_wait|libgomp.so.1",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#1}, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#1}&&, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#1}, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#1}&&, at::native::(anonymous namespace)::fill_kernel(at::TensorIterator&, c10::Scalar const&)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "_ZN2at8internal15invoke_parallelIZNS_18TensorIteratorBase8for_eachEN3c1012function_refIFvPPcPKlllEEElEUlllE_EEvlllRKT_._omp_fn.0|libtorch_cpu.so",
            "gomp_finish_task|libgomp.so.1",
            "gomp_team_barrier_wait_end|libgomp.so.1"
        ],
        "RandomHorizontalFlip": [
            "ImagingFlipLeftRight|_imaging.cpython-38-x86_64-linux-gnu.so",
            "_int_free|libc.so.6"
        ],
        "Load": [
            "__GI___libc_malloc|libc.so.6",
            "method_vectorcall|python3.8",
            "PyObject_IsTrue|python3.8",
            "ImagingJpegDecode|_imaging.cpython-38-x86_64-linux-gnu.so",
            "jpeg_read_scanlines|libjpeg.so.9",
            "jpeg_fill_bit_buffer|libjpeg.so.9",
            "__libc_calloc|libc.so.6",
            "jpeg_idct_16x16|libjpeg.so.9",
            "ycc_rgb_convert|libjpeg.so.9",
            "PyObject_IsInstance|python3.8",
            "ImagingUnpackRGB|_imaging.cpython-38-x86_64-linux-gnu.so",
            "__memset_avx2_unaligned_erms|libc.so.6",
            "bytes_concat|python3.8",
            "process_data_simple_main|libjpeg.so.9",
            "load|ImageFile.py",
            "method_vectorcall_FASTCALL|python3.8",
            "decompress_onepass|libjpeg.so.9",
            "decode_mcu|libjpeg.so.9",
            "__memmove_avx_unaligned_erms|libc.so.6",
            "_copy|_imaging.cpython-38-x86_64-linux-gnu.so",
            "jpeg_idct_islow|libjpeg.so.9",
            "_decode|_imaging.cpython-38-x86_64-linux-gnu.so"
        ],
        "Resize": [
            "ImagingResampleHorizontal_8bpc|_imaging.cpython-38-x86_64-linux-gnu.so",
            "ImagingResampleVertical_8bpc|_imaging.cpython-38-x86_64-linux-gnu.so",
            "_int_free|libc.so.6",
            "bilinear_filter|_imaging.cpython-38-x86_64-linux-gnu.so"
        ],
        "ToTensor": [
            "_int_free|libc.so.6",
            "at::internal::set_thread_num|libtorch_cpu.so",
            "PyBytes_FromStringAndSize|python3.8",
            "_PyObject_GetMethod|python3.8",
            "gomp_simple_barrier_wait|libgomp.so.1",
            "PyObject_IsTrue|python3.8",
            "method_vectorcall|python3.8",
            "method_vectorcall_O|python3.8",
            "tobytes|Image.py",
            "ImagingPackRGB|_imaging.cpython-38-x86_64-linux-gnu.so",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel<at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#11}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(unsigned char)#1}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#11}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(unsigned char)#1}&&, long)::{lambda(char**long const*, long)#1}>(, signed char, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#11}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda()#1}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(unsigned char)#1} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "__memmove_avx_unaligned_erms|libc.so.6",
            "_Py_BuildValue_SizeT|python3.8",
            "__posix_memalign|libc.so.6",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(unsigned char)#1}, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<unsigned char>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(unsigned char)#1}&&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<unsigned char>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(unsigned char)#1}, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<unsigned char>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(unsigned char)#1}&&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#2}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<unsigned char>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "munmap|libc.so.6",
            "gomp_team_end|libgomp.so.1",
            "method_vectorcall_VARARGS|python3.8",
            "drop_gil|python3.8",
            "gomp_team_barrier_wait_end|libgomp.so.1",
            "take_gil|python3.8",
            "_PyBytes_Resize|python3.8"
        ],
        "Normalize": [
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "munmap|libc.so.6",
            "gomp_team_end|libgomp.so.1",
            "normalize|functional.py",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}&&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}&&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "gomp_simple_barrier_wait|libgomp.so.1",
            "gomp_team_barrier_wait_end|libgomp.so.1",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_index_kernel<float, at::native::(anonymous namespace)::index_kernel(at::TensorIterator&, c10::ArrayRef<long>, c10::ArrayRef<long>)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(char*char*, long)#1}>(void, at::TensorIterator&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::native::(anonymous namespace)::index_kernel(at::TensorIterator&, c10::ArrayRef<long>, c10::ArrayRef<long>)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(char*char*, long)#1} const&, bool)::{lambda(char**long const*, long)#1}>(, signed char, at::native::(anonymous namespace)::cpu_index_kernel<float, at::native::(anonymous namespace)::index_kernel(at::TensorIterator&, c10::ArrayRef<long>, c10::ArrayRef<long>)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(char*char*, long)#1}>(void, at::TensorIterator&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::native::(anonymous namespace)::index_kernel(at::TensorIterator&, c10::ArrayRef<long>, c10::ArrayRef<long>)::{lambda()#1}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(char*char*, long)#1} const&, bool)::{lambda(char**long const*, long)#1} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::mul_kernel(at::TensorIteratorBase&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::mul_kernel(at::TensorIteratorBase&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::mul_kernel(at::TensorIteratorBase&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::mul_kernel(at::TensorIteratorBase&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::mul_kernel(at::TensorIteratorBase&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::mul_kernel(at::TensorIteratorBase&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::mul_kernel(at::TensorIteratorBase&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::mul_kernel(at::TensorIteratorBase&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so",
            "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::add_kernel(at::TensorIteratorBase&, c10::Scalar const&)::{lambda()#2}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so"
        ]
    },
    "common_funcs_to_op": {
        "munmap|libc.so.6": [
            "BatchCollator",
            "ToTensor",
            "Normalize"
        ],
        "gomp_team_end|libgomp.so.1": [
            "BatchCollator",
            "ToTensor",
            "Normalize"
        ],
        "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}&&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(float)#1}&&, at::native::(anonymous namespace)::copy_kernel(at::TensorIterator&, bool)::{lambda()#6}::operator()(void) const::{lambda()#8}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so": [
            "BatchCollator",
            "Normalize"
        ],
        "gomp_simple_barrier_wait|libgomp.so.1": [
            "BatchCollator",
            "ToTensor",
            "Normalize"
        ],
        "gomp_team_barrier_wait_end|libgomp.so.1": [
            "BatchCollator",
            "ToTensor",
            "Normalize"
        ],
        "_int_free|libc.so.6": [
            "RandomHorizontalFlip",
            "Resize",
            "ToTensor"
        ],
        "method_vectorcall|python3.8": [
            "Load",
            "ToTensor"
        ],
        "PyObject_IsTrue|python3.8": [
            "Load",
            "ToTensor"
        ],
        "__memmove_avx_unaligned_erms|libc.so.6": [
            "Load",
            "ToTensor"
        ],
        "c10::function_ref<void (char**, long const*, long, long)>::callback_fn<at::TensorIteratorBase::loop_2d_from_1d<at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2}>(, signed char, at::native::(anonymous namespace)::cpu_kernel_vec<(bool)1, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}>(void, at::TensorIteratorBase&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(floatfloat)#1}&&, at::native::(anonymous namespace)::div_true_kernel(at::TensorIteratorBase&)::{lambda()#1}::operator()(void) const::{lambda()#4}::operator()(void) const::{lambda(at::vec::(anonymous namespace)::Vectorized<float>at::vec::(anonymous namespace)::Vectorized<float>)#2}&&, long)::{lambda(char**long const*, long)#2} const&)::{lambda(char**long const*, long, long)#1}>|libtorch_cpu.so": [
            "ToTensor",
            "Normalize"
        ]
    }
}